#!/usr/bin/env python3
"""
Generate CoolProp property tables for OpenFOAM.

This script generates tabulated thermophysical properties for CO₂
using CoolProp, formatted for use in OpenFOAM simulations.

Usage:
    python generate_coolprop_tables.py --fluid CO2 --temp-range -100:100 --press-range 1:200
"""

import argparse
import sys
from pathlib import Path
from typing import Tuple

import numpy as np

try:
    import CoolProp.CoolProp as CP
except ImportError:
    print("Error: CoolProp not installed. Install with: pip install CoolProp")
    sys.exit(1)


class PropertyTableGenerator:
    """Generate thermophysical property tables from CoolProp."""

    def __init__(self, fluid: str, temp_range: Tuple[float, float],
                 press_range: Tuple[float, float], n_temp: int = 100,
                 n_press: int = 100):
        """
        Initialize property table generator.

        Args:
            fluid: Fluid name (e.g., 'CO2')
            temp_range: Temperature range in °C (min, max)
            press_range: Pressure range in bar (min, max)
            n_temp: Number of temperature points
            n_press: Number of pressure points
        """
        self.fluid = fluid
        self.temp_range = temp_range
        self.press_range = press_range
        self.n_temp = n_temp
        self.n_press = n_press

        # Convert to SI
        self.temp_K = (temp_range[0] + 273.15, temp_range[1] + 273.15)
        self.press_Pa = (press_range[0] * 1e5, press_range[1] * 1e5)

        # Generate grids
        self.T_grid = np.linspace(self.temp_K[0], self.temp_K[1], n_temp)
        self.P_grid = np.linspace(self.press_Pa[0], self.press_Pa[1], n_press)

    def generate_table(self, output_path: Path):
        """
        Generate complete property table.

        Args:
            output_path: Path to output file
        """
        print(f"Generating property table for {self.fluid}")
        print(f"  Temperature range: {self.temp_range[0]:.1f} to {self.temp_range[1]:.1f} °C")
        print(f"  Pressure range: {self.press_range[0]:.1f} to {self.press_range[1]:.1f} bar")
        print(f"  Grid: {self.n_temp} x {self.n_press} = {self.n_temp * self.n_press} points")

        # Initialize arrays
        rho = np.zeros((self.n_temp, self.n_press))
        cp = np.zeros((self.n_temp, self.n_press))
        mu = np.zeros((self.n_temp, self.n_press))
        k = np.zeros((self.n_temp, self.n_press))
        h = np.zeros((self.n_temp, self.n_press))

        # Compute properties at each point
        for i, T in enumerate(self.T_grid):
            for j, P in enumerate(self.P_grid):
                try:
                    rho[i, j] = CP.PropsSI('D', 'T', T, 'P', P, self.fluid)
                    cp[i, j] = CP.PropsSI('C', 'T', T, 'P', P, self.fluid)
                    mu[i, j] = CP.PropsSI('V', 'T', T, 'P', P, self.fluid)
                    k[i, j] = CP.PropsSI('L', 'T', T, 'P', P, self.fluid)
                    h[i, j] = CP.PropsSI('H', 'T', T, 'P', P, self.fluid)
                except Exception as e:
                    # Handle out-of-range or phase transition issues
                    print(f"  Warning: Failed at T={T:.1f}K, P={P/1e5:.1f}bar: {e}")
                    rho[i, j] = np.nan
                    cp[i, j] = np.nan
                    mu[i, j] = np.nan
                    k[i, j] = np.nan
                    h[i, j] = np.nan

            if i % 10 == 0:
                print(f"  Progress: {i}/{self.n_temp} temperature points")

        # Write table
        self._write_openfoam_table(output_path, rho, cp, mu, k, h)

        print(f"✓ Property table written to: {output_path}")

    def _write_openfoam_table(self, output_path: Path, rho, cp, mu, k, h):
        """
        Write property table in OpenFOAM format.

        Args:
            output_path: Output file path
            rho: Density array [kg/m³]
            cp: Specific heat array [J/kg/K]
            mu: Dynamic viscosity array [Pa·s]
            k: Thermal conductivity array [W/m/K]
            h: Specific enthalpy array [J/kg]
        """
        output_path.parent.mkdir(parents=True, exist_ok=True)

        with open(output_path, 'w') as f:
            f.write(f"// CoolProp property table for {self.fluid}\n")
            f.write(f"// Generated by generate_coolprop_tables.py\n")
            f.write(f"// Temperature range: {self.temp_range[0]} to {self.temp_range[1]} °C\n")
            f.write(f"// Pressure range: {self.press_range[0]} to {self.press_range[1]} bar\n")
            f.write(f"// Grid: {self.n_temp} x {self.n_press}\n")
            f.write(f"\n")

            # Write header
            f.write(f"nTemperature {self.n_temp};\n")
            f.write(f"nPressure {self.n_press};\n")
            f.write(f"\n")

            # Write temperature grid
            f.write("temperature\n(\n")
            for T in self.T_grid:
                f.write(f"    {T:.6f}\n")
            f.write(");\n\n")

            # Write pressure grid
            f.write("pressure\n(\n")
            for P in self.P_grid:
                f.write(f"    {P:.6f}\n")
            f.write(");\n\n")

            # Write properties (flatten arrays)
            for prop_name, prop_array in [("density", rho), ("cp", cp),
                                           ("mu", mu), ("kappa", k),
                                           ("enthalpy", h)]:
                f.write(f"{prop_name}\n(\n")
                flat = prop_array.flatten()
                for val in flat:
                    if np.isnan(val):
                        f.write("    0.0\n")  # Use zero for invalid points
                    else:
                        f.write(f"    {val:.6e}\n")
                f.write(");\n\n")


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Generate CoolProp property tables for OpenFOAM"
    )
    parser.add_argument(
        "--fluid",
        default="CO2",
        help="Fluid name (default: CO2)"
    )
    parser.add_argument(
        "--temp-range",
        default="-100:100",
        help="Temperature range in °C (format: min:max, default: -100:100)"
    )
    parser.add_argument(
        "--press-range",
        default="1:200",
        help="Pressure range in bar (format: min:max, default: 1:200)"
    )
    parser.add_argument(
        "--n-temp",
        type=int,
        default=100,
        help="Number of temperature points (default: 100)"
    )
    parser.add_argument(
        "--n-press",
        type=int,
        default=100,
        help="Number of pressure points (default: 100)"
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=None,
        help="Output file path (default: ../properties/coolprop_tables/<fluid>_table.dat)"
    )

    args = parser.parse_args()

    # Parse ranges
    temp_min, temp_max = map(float, args.temp_range.split(':'))
    press_min, press_max = map(float, args.press_range.split(':'))

    # Default output path
    if args.output is None:
        script_dir = Path(__file__).parent
        output_dir = script_dir.parent / "properties" / "coolprop_tables"
        args.output = output_dir / f"{args.fluid}_table.dat"

    # Generate table
    generator = PropertyTableGenerator(
        fluid=args.fluid,
        temp_range=(temp_min, temp_max),
        press_range=(press_min, press_max),
        n_temp=args.n_temp,
        n_press=args.n_press
    )

    try:
        generator.generate_table(args.output)
    except Exception as e:
        print(f"\nError generating table: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
